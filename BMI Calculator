import tkinter as tk
from tkinter import ttk, messagebox
import sqlite3
import matplotlib.pyplot as plt
from datetime import datetime

class BMICalculatorApp:
    def _init_(self, root):
        self.root = root
        self.root.title("BMI Calculator")


        self.weight_var = tk.DoubleVar()
        self.height_var = tk.DoubleVar()
        self.bmi_var = tk.StringVar()
        self.bmi_category_var = tk.StringVar()

    
        ttk.Label(root, text="Weight (kg):").grid(row=0, column=0, padx=10, pady=5, sticky="w")
        ttk.Entry(root, textvariable=self.weight_var).grid(row=0, column=1, padx=10, pady=5)
        
        ttk.Label(root, text="Height (m):").grid(row=1, column=0, padx=10, pady=5, sticky="w")
        ttk.Entry(root, textvariable=self.height_var).grid(row=1, column=1, padx=10, pady=5)
        
       
        ttk.Button(root, text="Calculate BMI", command=self.calculate_bmi).grid(row=2, column=0, columnspan=2, padx=10, pady=10)

       
        ttk.Label(root, text="BMI:").grid(row=3, column=0, padx=10, pady=5, sticky="w")
        ttk.Label(root, textvariable=self.bmi_var).grid(row=3, column=1, padx=10, pady=5, sticky="w")

        ttk.Label(root, text="Category:").grid(row=4, column=0, padx=10, pady=5, sticky="w")
        ttk.Label(root, textvariable=self.bmi_category_var).grid(row=4, column=1, padx=10, pady=5, sticky="w")

       
        self.conn = sqlite3.connect('bmi_data.db')
        self.c = self.conn.cursor()
        self.c.execute('''CREATE TABLE IF NOT EXISTS bmi_records (
                            id INTEGER PRIMARY KEY AUTOINCREMENT,
                            date TEXT,
                            weight REAL,
                            height REAL,
                            bmi REAL,
                            category TEXT
                          )''')
        self.conn.commit()

    def calculate_bmi(self):
        try:
            weight = self.weight_var.get()
            height = self.height_var.get()

            if weight <= 0 or height <= 0:
                messagebox.showerror("Error", "Weight and height must be positive numbers.")
                return

            bmi = weight / (height * height)
            self.bmi_var.set(f"{bmi:.2f}")

            category = self.categorize_bmi(bmi)
            self.bmi_category_var.set(category)

          
            self.save_to_database(weight, height, bmi, category)

            self.visualize_bmi_history()

        except Exception as e:
            messagebox.showerror("Error", f"An error occurred: {str(e)}")

    def categorize_bmi(self, bmi):
        if bmi < 18.5:
            return "Underweight"
        elif 18.5 <= bmi < 24.9:
            return "Normal weight"
        elif 25 <= bmi < 29.9:
            return "Overweight"
        else:
            return "Obesity"

    def save_to_database(self, weight, height, bmi, category):
        date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        self.c.execute("INSERT INTO bmi_records (date, weight, height, bmi, category) VALUES (?, ?, ?, ?, ?)",
                       (date, weight, height, bmi, category))
        self.conn.commit()

    def visualize_bmi_history(self):
        self.c.execute("SELECT date, bmi FROM bmi_records")
        data = self.c.fetchall()

        dates = [record[0] for record in data]
        bmis = [record[1] for record in data]

        plt.figure()
        plt.plot(dates, bmis, marker='o')
        plt.xlabel('Date')
        plt.ylabel('BMI')
        plt.title('BMI History')
        plt.xticks(rotation=45)
        plt.tight_layout()
        plt.show()

    def _del_(self):
        self.conn.close()


def main():
    root = tk.Tk()
    app = BMICalculatorApp(root)
    root.mainloop()

if _name_ == "_main_":
    main()
